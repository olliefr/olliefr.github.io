<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ollie&#39;s Universe</title>
    <description>&amp;ldquo;&lt;em&gt;Ollie&#39;s website!&lt;/em&gt;&amp;rdquo; the Gruffalo said,&lt;br&gt; And quick as the wind he turned and fled.
</description>
    <link>http://www.frolovs.me/</link>
    <atom:link href="http://www.frolovs.me/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Thu, 26 May 2016 16:06:18 +0100</pubDate>
    <lastBuildDate>Thu, 26 May 2016 16:06:18 +0100</lastBuildDate>
    <generator>Jekyll v3.1.5</generator>
    
      <item>
        <title>Binomial Pricing Trees in R</title>
        <description>&lt;p&gt;This is &lt;strong&gt;not&lt;/strong&gt; yet another tutorial on binomial trees. I expect my reader to be familiar with them already. If not, an &lt;a href=&quot;http://www.goddardconsulting.ca/option-pricing-binomial-index.html&quot;&gt;article by Goddard Consulting&lt;/a&gt; is rather readable. Here I would like to show how to program the binomial trees in R and how to generate the graph description which an external program like &lt;a href=&quot;http://www.graphviz.org/&quot;&gt;graphviz&lt;/a&gt; can turn into a pretty picture.&lt;/p&gt;

&lt;h1 id=&quot;why-keep-the-tree&quot;&gt;Why keep the tree?&lt;/h1&gt;

&lt;p&gt;It is true that in many cases it is not necessary to store the whole tree just to get the final value of the option. I do, however, find it useful to see how the option value changes with the asset price and time. It is also useful if one wishes to calculate greeks, for example.&lt;/p&gt;

&lt;h1 id=&quot;some-examples&quot;&gt;Some examples&lt;/h1&gt;

&lt;p&gt;The following example was produced by the programs discussed later in this post. The parameters (and, thankfully, results) match those of the Example 11.11 in Hull.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The index level is 810, strike price is 800, risk-free rate is 5%, volatility is 20%, and dividend yield is 2%. We are pricing a 6-month European call option.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/assets/binomial-tree-european-call-1.png&quot; alt=&quot;A Binomial Tree Example 1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;For a more involved example, here is a valuation of an American put with more steps. The circumscribed noded at the bottom right are the nodes where an early exercise is preferred.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/binomial-tree-american-put-1.png&quot; alt=&quot;A Binomial Tree Example 2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;By comparing with the following screenshot from DerivaGem one can see that the values make sense, indeed.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/derivagem-1.png&quot; alt=&quot;A DerivaGem screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;That’s the desired outcome, let’s get it done.&lt;/p&gt;

&lt;h1 id=&quot;previously-in-2012&quot;&gt;Previously… in 2012&lt;/h1&gt;

&lt;p&gt;The &lt;a href=&quot;http://www.theresearchkitchen.com/archives/738&quot;&gt;two functions written by Rory Winston&lt;/a&gt; will provide scaffolding for achieving the aims of this post.&lt;/p&gt;

&lt;p&gt;The &lt;em&gt;genlattice&lt;/em&gt; function generates the &lt;em&gt;recombining binomial tree&lt;/em&gt;, or &lt;em&gt;binary lattice&lt;/em&gt; for the asset price only.&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;400: Invalid request
&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/1246bdc97e26e9b4ac0712f53fa1eaa9.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;The &lt;em&gt;dotlattice&lt;/em&gt; function takes this lattice and generates the graph specification in &lt;a href=&quot;http://www.graphviz.org/&quot;&gt;graphviz&lt;/a&gt; format from it.&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;400: Invalid request
&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/0818526077ab518317cdaac7d7f148ab.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;These two functions are our starting point.&lt;/p&gt;

&lt;h1 id=&quot;fast-forward-to-2016&quot;&gt;Fast forward to 2016&lt;/h1&gt;

&lt;p&gt;Rory’s post was written in 2012, and I had to make some trivial changes to make it work with my version of &lt;a href=&quot;http://www.graphviz.org/&quot;&gt;graphviz&lt;/a&gt;. Specifically, I had to remove references to &lt;em&gt;samehead&lt;/em&gt; and &lt;em&gt;sametail&lt;/em&gt; in node specification.&lt;/p&gt;

&lt;p&gt;I changed the line&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-r&quot; data-lang=&quot;r&quot;&gt;&lt;span class=&quot;n&quot;&gt;cat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;node[shape=&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;, samehead, sametail];&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;\n&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sep&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;to&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-r&quot; data-lang=&quot;r&quot;&gt;&lt;span class=&quot;n&quot;&gt;cat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;node[shape=&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;];&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;\n&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sep&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;and this was enough to be able to produce the image using R&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-r&quot; data-lang=&quot;r&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;capture.output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dotlattice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;genlattice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1.1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0.9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;labels&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TRUE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;lattice.dot&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;and the terminal&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;dot -Tpng -o lattice-1.png lattice.dot&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;img src=&quot;/assets/lattice-1.png&quot; alt=&quot;A Binomial Tree generated with genlattice and dotlattice. &quot; /&gt;&lt;/p&gt;

&lt;p&gt;These functions are a good starting point but we need more. The &lt;em&gt;genlattice&lt;/em&gt; function must value the option and store the option price, as well as the asset price. It must accept the parameters which describe the option valuation scenarios, such as volatility, interest rates, payoff function and so on. The &lt;em&gt;dotlattice&lt;/em&gt; function needs to render both asset and option prices to a desired level of precision. It must work with both European and American trees (the latter is different from the former by having an early exercise flag for each node).&lt;/p&gt;

&lt;h1 id=&quot;the-vanilla-payoff-functions&quot;&gt;The Vanilla Payoff Functions&lt;/h1&gt;

&lt;p&gt;We must have the payoff functions in hand before we proceed. These provide the boundary conditions for the equations and they will be useful for pricing both European and American options. Note, that these are &lt;em&gt;vanilla&lt;/em&gt; options only for now.&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;400: Invalid request
&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/44f66fde5719348946b121f91204caef.js&quot;&gt; &lt;/script&gt;

&lt;h1 id=&quot;european-option-valuation&quot;&gt;European Option Valuation&lt;/h1&gt;

&lt;p&gt;I make a number of significant changes to &lt;em&gt;genlattice&lt;/em&gt; function. Previously, we’ve been storing the asset value only at each node using a vector named &lt;em&gt;X&lt;/em&gt;. Now we are going to store &lt;em&gt;two&lt;/em&gt; values per node – the asset price and the option price. This can be achieved by using a data frame. To create a data frame, we first compute the number of nodes in the tree and pre-populate the frame with NA values. This is to make sure that our pricing algorithm does not leave any nodes untouched. This provides an invariant – after the valuation has finished, there should be no NA values in the frame.&lt;/p&gt;

&lt;p&gt;We also need to match the up and down movement parameters with volatility since the latter is the thing we can at least hope to know. For this, the oldest and simplest Cox-Ross-Rubinstein method is used (CRR, 1979), where the &lt;script type=&quot;math/tex&quot;&gt;\sigma&lt;/script&gt; is volatility and &lt;script type=&quot;math/tex&quot;&gt;\delta t&lt;/script&gt; is a time step.&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{align}
  u&amp; =e^{\sigma \sqrt{\delta t}}\\
  d&amp; =e^{-\sigma \sqrt{\delta t}} = \frac{1}{u}\\
  p&amp; =\frac{a - d}{u - d}\\
  a&amp; = e^{-r \delta t}
\end{align} %]]&gt;&lt;/script&gt;

&lt;p&gt;Where &lt;script type=&quot;math/tex&quot;&gt;p&lt;/script&gt; is the synthetic probability (or Q-measure).&lt;/p&gt;

&lt;p&gt;Aplying the discussed changes results in the following function.&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;400: Invalid request
&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/177e8b41c5829cce4a4b0d4d219bf99d.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;For convenience, I also define two functions which will serve as the interface to it.&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;400: Invalid request
&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/80dd9ef9a39a83719550cd7750733dc5.js&quot;&gt; &lt;/script&gt;

&lt;h1 id=&quot;american-option-valuation&quot;&gt;American Option Valuation&lt;/h1&gt;

&lt;p&gt;For the American option, the early exercise flag must to be stored at every node as well. While it’s possible to have a unified implementation which values both European and American options, the amount of branching resulting in the code is not worth it, in my experience. The extra flags and branching sabotage clarity and ease of making changes. I take the view that any computer program that handles money must be as straightforward in its implementation as possible. So, without further ado, I present my American vanilla option valuator.&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;400: Invalid request
&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/72779161c6bced858b73867074de27b1.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;And just like before, there are two functions which will serve as the interface to it.&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;400: Invalid request
&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/29f873631bd014af2d2d9262a4a79080.js&quot;&gt; &lt;/script&gt;

&lt;h1 id=&quot;plotting-the-tree&quot;&gt;Plotting the tree&lt;/h1&gt;

&lt;p&gt;Thankfully, as far as plotting is concerned, the differences between a European and American trees are negligible – the latter needs some way of highlighting the nodes where early exercise happens. So I chose to keep a single &lt;em&gt;dotlattice&lt;/em&gt; implementation which checks which type of tree it is dealing with. The facility to round the prices to a given number of digits after a decimal point has been introduced. I have also removed some unnecessary functionality such as printing the points instead of full nodes.&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;400: Invalid request
&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/0338553b084a447142717bee62f0324a.js&quot;&gt; &lt;/script&gt;

&lt;h1 id=&quot;the-results&quot;&gt;The results&lt;/h1&gt;

&lt;p&gt;Now the time has come to try some examples. Here is the &lt;a href=&quot;https://github.com/olliefr/binomial-trees/blob/master/binomial-pricing-trees.R&quot;&gt;complete, up-to-date code in a single file&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The first example is the European Call that we have seen in the introduction albeit with an increased number of steps.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-r&quot; data-lang=&quot;r&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;genlattice.vanilla.european.call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Asset&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;810&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Volatility&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0.2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IntRate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0.05&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DividendRate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0.02&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Strike&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;800&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Expiry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NoSteps&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;capture.output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dotlattice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;digits&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;lattice.dot&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And through the &lt;a href=&quot;http://www.graphviz.org/&quot;&gt;graphviz&lt;/a&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;dot -Tpng -o binomial-tree-european-call-2.png lattice.dot&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The output is&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/binomial-tree-european-call-2.png&quot; alt=&quot;A Binomial Tree Example 3&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Another example is for a foreign currency, which can be thought of as an asset providing a yield at the foreign risk-free rate of interest.&lt;/p&gt;

&lt;p&gt;The following Example 11.2 is from Hull 7th ed., p. 254&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The Australian dollar is currently worth 0.6100 U.S. dollards and this exchange rate has a volatility of 12%. The Australian risk-free rate is 7% and the U.S. risk-free rate is 5%. […] 3-month American call option with a strike price of 0.6000 using a three-step tree.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We can value this using our framework&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-r&quot; data-lang=&quot;r&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;genlattice.vanilla.american.call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Asset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0.6100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Volatility&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0.12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IntRate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0.05&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DividendRate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0.07&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Strike&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0.6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Expiry&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NoSteps&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;capture.output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dotlattice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;digits&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;lattice.dot&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And through the &lt;a href=&quot;http://www.graphviz.org/&quot;&gt;graphviz&lt;/a&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;dot -Tpng -o binomial-tree-american-call-1.png lattice.dot&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We get&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/binomial-tree-american-call-1.png&quot; alt=&quot;A Binomial Tree Example 4&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This matches the Figure 11.12 in Hull. What a relief!&lt;/p&gt;

&lt;h1 id=&quot;what-now&quot;&gt;What now?&lt;/h1&gt;

&lt;p&gt;The code that we now have opens up a number of interesting directions. The other related things which I would like to try:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Computing the Greeks in binomial tree&lt;/li&gt;
  &lt;li&gt;Binomial trees with skewness and curtosis&lt;/li&gt;
  &lt;li&gt;Matching volatility with methods other than Cox-Ross-Rubinstein&lt;/li&gt;
  &lt;li&gt;Trinomial trees&lt;/li&gt;
  &lt;li&gt;Non-recombining trees, path-dependent options&lt;/li&gt;
  &lt;li&gt;Power, cap options&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I’ll post a write-up if I ever have the chance to look into them.&lt;/p&gt;

&lt;h1 id=&quot;references&quot;&gt;References&lt;/h1&gt;

&lt;p&gt;The books listed below all discuss binomial trees to some depth and have pictures like the ones I have created for this post.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Haug, E.G. (2007) &lt;em&gt;The Complete Guide to Option Pricing Formulas&lt;/em&gt;. 2nd ed. Mc-Graw Hill&lt;/li&gt;
  &lt;li&gt;Hull, J.C. (2007) &lt;em&gt;Options, Futures, and Other Derivatives&lt;/em&gt;. 7th ed. Pearson Education&lt;/li&gt;
  &lt;li&gt;Neftci, S.N. and Hirsa A. (2014) &lt;em&gt;An Introduction to the Mathematics of Financial Derivatives&lt;/em&gt;. 3rd ed. Elsevier&lt;/li&gt;
  &lt;li&gt;Wilmott, P. (2006) &lt;em&gt;Paul Wilmott on Quantitative Finance: Volume 1&lt;/em&gt;. 2nd ed. Wiley&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Tue, 24 May 2016 09:00:00 +0100</pubDate>
        <link>http://www.frolovs.me/quant/finance/binomial/american/european/r/graphviz/2016/05/24/binomial-pricing-trees-in-R.html</link>
        <guid isPermaLink="true">http://www.frolovs.me/quant/finance/binomial/american/european/r/graphviz/2016/05/24/binomial-pricing-trees-in-R.html</guid>
        
        
        <category>quant</category>
        
        <category>finance</category>
        
        <category>binomial</category>
        
        <category>american</category>
        
        <category>european</category>
        
        <category>R</category>
        
        <category>graphviz</category>
        
      </item>
    
      <item>
        <title>Brainteasing Our Way to the Central Limit Theorem</title>
        <description>&lt;!--
&lt;div class=&quot;note warning&quot;&gt;
     &lt;h5&gt;This is work in progress&lt;/h5&gt;
     &lt;p&gt;Besides, I&#39;m just a small knitted dog, there is no reason to believe I&#39;ve got it right.&lt;/p&gt;
&lt;/div&gt;
--&gt;

&lt;p&gt;This post is about trying to solve the following brain-teaser:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;You toss a fair coin 400 times. What’s the probability that you get at least 220 heads? Round your answer to the nearest percent.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Each coin toss is an independent Bernoulli random variable parametrised by &lt;script type=&quot;math/tex&quot;&gt;p=\frac{1}{2}&lt;/script&gt; since the coin is fair. We’ll call a single sequence of 400 tosses a single trial. It is a Binomial random variable with the probability mass function (PMF)&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;p_{x}(k) = \binom{n}{k} p^k \left(1-p\right)^{n-k}&lt;/script&gt;

&lt;p&gt;This means, for example, that the probability of scoring &lt;em&gt;exactly&lt;/em&gt; 220 heads is &lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;p_{x}(220) = \binom{400}{220} \left(\frac{1}{2}\right)^{220} \left(1-\frac{1}{2}\right)^{400-220} = \frac{\binom{400}{220}}{2^{400}}&lt;/script&gt;

&lt;p&gt;The final form of this expression can be interpreted as a number of ways to choose 220 heads from 400 tosses in the numerator over the total number of possible configurations in the denominator.&lt;/p&gt;

&lt;p&gt;Herein comes the trouble. We would like to know the probability of the number of heads being &lt;script type=&quot;math/tex&quot;&gt;\ge 220&lt;/script&gt;, not just &lt;em&gt;exactly&lt;/em&gt; 220. In other words, we seek to compute the sum &lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;p_x(k \ge 220) = \sum^{400}_{k=220} p_x(k) = p_x(220) + p_x(221) + p_x(222) + \dots + p_x(400)&lt;/script&gt;

&lt;p&gt;There is a handful of approaches one can take to solve this problem.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Run &lt;script type=&quot;math/tex&quot;&gt;1\,000\,000&lt;/script&gt; trials, each of &lt;script type=&quot;math/tex&quot;&gt;400&lt;/script&gt; tosses. Count how many trials scored &lt;script type=&quot;math/tex&quot;&gt;\ge 220&lt;/script&gt; heads. This is the most direct approach, but how does one justify the chosen number of trials? This approach is also most computationally expensive, but as we will see it has its values as it is very easy to implement and it provides a good estimate for comparison with other methods.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The sum &lt;script type=&quot;math/tex&quot;&gt;\sum^{400}_{k=220} p_x(k)&lt;/script&gt; can be computed directly by iteration.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;A classic pencil and paper approach could use a normal approximation based on the central limit theorem. Statistical tables will be required to avoid any computer or calculator use. [One &lt;em&gt;could&lt;/em&gt; avoid using tables and compute everything manually, for example by using Taylor expansions of &lt;script type=&quot;math/tex&quot;&gt;e^x&lt;/script&gt; but we won’t go there.]&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;option-1-simulation&quot;&gt;Option 1: Simulation&lt;/h1&gt;

&lt;p&gt;The simulation does not require much understanding of the probabilistic model behind the problem. We just run &lt;script type=&quot;math/tex&quot;&gt;1\,000\,000&lt;/script&gt; trials, &lt;script type=&quot;math/tex&quot;&gt;400&lt;/script&gt; tosses in each, and find out how many of the trials scored more than &lt;script type=&quot;math/tex&quot;&gt;220&lt;/script&gt; heads.&lt;/p&gt;

&lt;p&gt;The first simulation is implemented in R:&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;400: Invalid request
&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/fa1cf400a31dde223628b6891534ddde.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;I get the value of &lt;script type=&quot;math/tex&quot;&gt;0.03&lt;/script&gt;, so the answer is &lt;script type=&quot;math/tex&quot;&gt;3\%&lt;/script&gt;.&lt;/p&gt;

&lt;p&gt;For no good reason at all, the same simulation crudely implemented in C++11:&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;400: Invalid request
&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/afecc7ddde5ba8c9c51d9d4e509b6149.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;It runs slower than R version above, and a representative answer is &lt;script type=&quot;math/tex&quot;&gt;\approx 0.025317&lt;/script&gt;, that is about &lt;script type=&quot;math/tex&quot;&gt;3\%&lt;/script&gt;.&lt;/p&gt;

&lt;h1 id=&quot;option-2-sum-by-iteration&quot;&gt;Option 2: Sum by Iteration&lt;/h1&gt;

&lt;p&gt;For a more formal approach, consider the sum &lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;p_x(k \ge 220) = p_x(220) + p_x(221) + p_x(222) + \dots + p_x(400)&lt;/script&gt;

&lt;p&gt;Since the Bernoulli probability for each toss &lt;script type=&quot;math/tex&quot;&gt;p=0.5&lt;/script&gt; is fixed, the sum of probabilities can be reduced to the sum of binomial coefficients &lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;p_x(k \ge 220) = 2^{-n} \sum_{k=220}^{400} \binom{n}{k}&lt;/script&gt;

&lt;p&gt;This sum is easy to do on a computer.&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;400: Invalid request
&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/19c9e93cd2f6babae0b103feb7f63ab7.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;This code returns the value of &lt;script type=&quot;math/tex&quot;&gt;0.03&lt;/script&gt;, or &lt;script type=&quot;math/tex&quot;&gt;3\%&lt;/script&gt;. This result was computed much, much faster than using simulation, but the important thing here is that it’s the &lt;em&gt;same answer&lt;/em&gt; obtained using &lt;em&gt;different methods&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;The C++ implementation would have to include a way to compute &lt;script type=&quot;math/tex&quot;&gt;\binom{n}{k}&lt;/script&gt; since the standard library does not provide for it. Implementing it is a good exercise, since one cannot rely on the mathematical definition involving factorials – the result would overflow even for rather small values of &lt;script type=&quot;math/tex&quot;&gt;n&lt;/script&gt;. (Knuth, 2011) has a lot more to say on this. &lt;/p&gt;

&lt;h1 id=&quot;option-3-normal-approximation-based-on-the-central-limit-theorem&quot;&gt;Option 3: Normal Approximation Based on the Central Limit Theorem&lt;/h1&gt;

&lt;p&gt;Since each coin toss &lt;script type=&quot;math/tex&quot;&gt;X_i&lt;/script&gt; is an independent Bernoulli rendom variable and all tosses in a trial are identically distributed with mean &lt;script type=&quot;math/tex&quot;&gt;\mu = \frac{1}{2}&lt;/script&gt; and variance &lt;script type=&quot;math/tex&quot;&gt;\sigma^2 = \frac{1}{4}&lt;/script&gt;, we can try to pretend that the sum &lt;script type=&quot;math/tex&quot;&gt;S_n = \sum^{400}_{i=1} X_i &lt;/script&gt; of such variables is normally distributed. &lt;/p&gt;

&lt;p&gt;Then we can compute the mean of this sum&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\mu_S = n \mu = 400 \cdot \frac{1}{2} = 200&lt;/script&gt;

&lt;p&gt;And also its variance&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\sigma^2_n = n \sigma^2 = 400 \cdot \frac{1}{4} = 100&lt;/script&gt;

&lt;p&gt;Now we could use the approximation &lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;P\left(S_n \le c \right) \approx \Phi\left(z\right)&lt;/script&gt;

&lt;p&gt;where &lt;script type=&quot;math/tex&quot;&gt;\Phi\left(z\right)&lt;/script&gt; is available from &lt;em&gt;standard&lt;/em&gt; normal CDF tables.&lt;/p&gt;

&lt;p&gt;If you think of it in terms of area under the graph, we would like to know the area of a slice between 220 and 400, or in other words the difference in the value of the CDF at these locations.&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;P\left( 220 \le S_n \le 400 \right) = 1 - P\left( 219 \le S_n \right)&lt;/script&gt;

&lt;p&gt;Two points must be noted. Firstly, &lt;script type=&quot;math/tex&quot;&gt;P\left( S_n \le 400 \right) = 1&lt;/script&gt;, since there is only &lt;script type=&quot;math/tex&quot;&gt;n=400&lt;/script&gt; tosses in a trial. Secondly, we have to be careful when moving from discrete to continuous world – we would like to include &lt;script type=&quot;math/tex&quot;&gt;P\left( S_n = 220 \right)&lt;/script&gt; into our answer, so the last (discrete) value to exclude is &lt;script type=&quot;math/tex&quot;&gt;S_n = 219&lt;/script&gt;. &lt;/p&gt;

&lt;p&gt;The CDF tables are normalised, so let’s normalise the value of &lt;script type=&quot;math/tex&quot;&gt;z&lt;/script&gt;&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;z = \frac{c -n\mu}{\sqrt{\sigma^2 n}} = \frac{219 - 200}{\sqrt{100}} = \frac{19}{10} = 1.9&lt;/script&gt;

&lt;p&gt;My tables (Lindley D.V. &amp;amp; Scott W.F., 2008) state that &lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\Phi\left( 1.9 \right) \approx 0.9713&lt;/script&gt;

&lt;p&gt;so the answer comes to&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;P\left( 220 \le S_n \le 400 \right) \approx 1 - 0.9713 = 0.0287&lt;/script&gt;

&lt;p&gt;Rounding this value to the nearest percent, the final answer is &lt;script type=&quot;math/tex&quot;&gt;3\%&lt;/script&gt;, as before.&lt;/p&gt;

&lt;p&gt;The normal approximation works so well because, to quote (Bersekas &amp;amp; Tsitsiklis, 2008, p. 279),&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;When &lt;script type=&quot;math/tex&quot;&gt;p&lt;/script&gt; is close to &lt;script type=&quot;math/tex&quot;&gt;\frac{1}{2}&lt;/script&gt;, in which case the PMF of &lt;script type=&quot;math/tex&quot;&gt;X_i&lt;/script&gt; is symmetric, the […] formula yields a very good approximation for &lt;script type=&quot;math/tex&quot;&gt;n&lt;/script&gt; as low as &lt;script type=&quot;math/tex&quot;&gt;40&lt;/script&gt; or &lt;script type=&quot;math/tex&quot;&gt;50&lt;/script&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This was pencil and paper (and statistical tables) approach. We can do the same thing in software to verify the answer. &lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;400: Invalid request
&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/13a03dffbcb8b6d805280c9afaab157a.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;This code returns the value of &lt;script type=&quot;math/tex&quot;&gt;0.03&lt;/script&gt;, or &lt;script type=&quot;math/tex&quot;&gt;3\%&lt;/script&gt;, same as before. &lt;/p&gt;

&lt;p&gt;There we have it!&lt;/p&gt;

&lt;h1 id=&quot;conclusions-and-meditations&quot;&gt;Conclusions and Meditations&lt;/h1&gt;

&lt;p&gt;Despite my education in mathematical modelling, I still get excited when a crude simulation turns out to be helpful for guiding more theoretical work. Such was the case this time as well – the simple simulation as the first option has prevented me from making an &lt;em&gt;order-of-magnitude&lt;/em&gt; sized error in my theoretical derivations later.&lt;/p&gt;

&lt;p&gt;If you read this far, thanks, and any comments/suggestions are welcome.&lt;/p&gt;

&lt;p&gt;Oliver&lt;/p&gt;

&lt;h1 id=&quot;references&quot;&gt;References&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;Bertsekas, D.P. and Tsitsiklis, J.N. (2008) &lt;em&gt;Introduction to Probability&lt;/em&gt;. 2nd ed. Athena Scientific.&lt;/li&gt;
  &lt;li&gt;Lindley, D.V. and Scott, W.F. (2008) &lt;em&gt;New Cambridge Statistical Tables&lt;/em&gt;. 2nd ed. Cambridge University Press&lt;/li&gt;
  &lt;li&gt;Knuth, D.E. (2011) &lt;em&gt;The Art of Computer Programming, Volume 2: Seminumerical Algorithms&lt;/em&gt;. 3rd ed. Addison Wesley&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Fri, 20 May 2016 00:00:00 +0100</pubDate>
        <link>http://www.frolovs.me/2016/05/20/brainteasing-to-central-limit-theorem.html</link>
        <guid isPermaLink="true">http://www.frolovs.me/2016/05/20/brainteasing-to-central-limit-theorem.html</guid>
        
        
      </item>
    
      <item>
        <title>Introduction</title>
        <description>&lt;p&gt;Hello, my name is Ollie. I’ve started this blog to document my (mis)adventures, mostly in technology. I have a large backlog of (small) personal projects which I would like to publish, even if just for the sake of revision of the things that I have learned. I hope that somebody may find at least some of this useful one day.&lt;/p&gt;

</description>
        <pubDate>Thu, 19 May 2016 15:22:59 +0100</pubDate>
        <link>http://www.frolovs.me/introduction/personal/2016/05/19/introduction.html</link>
        <guid isPermaLink="true">http://www.frolovs.me/introduction/personal/2016/05/19/introduction.html</guid>
        
        
        <category>introduction</category>
        
        <category>personal</category>
        
      </item>
    
  </channel>
</rss>
